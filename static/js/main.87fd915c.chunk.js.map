{"version":3,"sources":["App.js","index.js"],"names":["Cell","BinarySearchList","_ref","value","index","array","left","right","mid","searchValue","react_default","a","createElement","className","cn","is-dead","is-left","is-right","is-mid","is-match","_Component","List","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","_this$props","props","values","cellProps","map","assign","Component","BinarySearch","_this$props2","chunk","slice","Math","floor","length","guess","App","state","handleValueChange","_ref2","target","_this","setState","parseInt","sortedArray","toConsumableArray","Array","keys","Fragment","htmlFor","type","id","min","max","onChange","App_BinarySearch","href","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.87fd915c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cn from \"classnames\";\n\n// display value in the begining\n// index = binSearch(value)\n// print index and :tada:\n// print sad face when does not exists\n\nconst makeListComponent = Cell =>\n  class List extends Component {\n    static propTypes = {\n      values: PropTypes.array.isRequired,\n      cellProps: PropTypes.object.isRequired\n    };\n\n    render() {\n      const { values, cellProps } = this.props;\n\n      return (\n        <div className=\"list\">\n          {values.map((value, index, array) => (\n            <Cell\n              key={value}\n              value={value}\n              index={index}\n              array={array}\n              {...cellProps}\n            />\n          ))}\n        </div>\n      );\n    }\n  };\n\nconst BinarySearchListCell = ({\n  value,\n  index,\n  array,\n  left,\n  right,\n  mid,\n  searchValue\n}) => (\n  <code\n    className={cn(\"cell\", {\n      \"is-dead\": index < left || right < index,\n      \"is-left\": index === left,\n      \"is-right\": index === right,\n      \"is-mid\": index === mid,\n      \"is-match\": searchValue === array[mid]\n    })}\n  >\n    {value}\n  </code>\n);\n\nconst BinarySearchList = makeListComponent(BinarySearchListCell);\n\nclass BinarySearch extends Component {\n  static propTypes = {\n    array: PropTypes.array.isRequired,\n    value: PropTypes.number.isRequired,\n    left: PropTypes.number.isRequired,\n    right: PropTypes.number.isRequired\n  };\n\n  render() {\n    const { array, value, left, right } = this.props;\n    const chunk = array.slice(left, right);\n    const mid = left + Math.floor(chunk.length / 2);\n\n    const guess = array[mid];\n\n    return (\n      <div className=\"binary-search\">\n        <div className=\"input\">\n          <BinarySearchList\n            values={array}\n            cellProps={{ left, mid, right, searchValue: value }}\n          />\n        </div>\n        {mid === left || mid === right ? (\n          <h2 className=\"result\">\n            <code>{value}</code> is not on the list. ðŸ˜¢ <br />\n            Index is <code>null</code>.\n          </h2>\n        ) : value < guess ? (\n          <BinarySearch {...this.props} right={mid} />\n        ) : guess < value ? (\n          <BinarySearch {...this.props} left={mid} />\n        ) : (\n          <h2 className=\"result\">\n            The index of <code>{value}</code> is <code>{mid}</code>.\n          </h2>\n        )}\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n    value: 14\n  };\n\n  handleValueChange = ({ target }) =>\n    this.setState({ value: parseInt(target.value) });\n\n  render() {\n    const { value } = this.state;\n    const sortedArray = [...new Array(20).keys()].map(value => value + 1);\n\n    return (\n      <>\n        <header>\n          <h1>Binary Search</h1>\n\n          <label htmlFor=\"value\">Value</label>\n          <input\n            type=\"range\"\n            id=\"value\"\n            min={0}\n            max={sortedArray.length}\n            value={value}\n            onChange={this.handleValueChange}\n          />\n          <h2>\n            What's the index of <code>{value}</code>?\n          </h2>\n        </header>\n        <section>\n          <BinarySearch\n            array={sortedArray}\n            value={value}\n            left={0}\n            right={sortedArray.length - 1}\n          />\n        </section>\n        <footer>\n          âš›\n          <a href=\"https://github.com/MiroslavPetrik/react-binary-search\">\n            Miroslav Petrik\n          </a>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}